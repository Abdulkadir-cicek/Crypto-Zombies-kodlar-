pragma solidity >=0.5.0 <0.6.0;

contract ZombieFactory {

    event NewZombie(uint zombieId, string name, uint dna); // Yeni zombi oluşturulduğunda bu olay tetiklenir

    uint dnaDigits = 16;
    uint dnaModulus = 10 ** dnaDigits;

    struct Zombie {
        string name;
        uint dna;
    }

    Zombie[] public zombies; // zombileri tutan dizi

    mapping (uint => address) public zombieToOwner; //zombileri sahipleriyle eşleyen mapping
    mapping (address => uint) ownerZombieCount; //her ownerın zombie sayısını izzleyen mapping

    function _createZombie(string memory _name, uint _dna) private {
        uint id = zombies.push(Zombie(_name, _dna)) - 1;
        zombieToOwner[id] = msg.sender;
        ownerZombieCount[msg.sender]++;
        emit NewZombie(id, _name, _dna);
    }
    //Kullanıcının girdiği isimden rastgele DNA üretir.
    function _generateRandomDna(string memory _str) private view returns (uint) {
        uint rand = uint(keccak256(abi.encodePacked(_str)));
        return rand % dnaModulus;
    }
     // 
    function createRandomZombie(string memory _name) public {
        require(ownerZombieCount[msg.sender] == 0);
        uint randDna = _generateRandomDna(_name);
        _createZombie(_name, randDna);
    }

} // Zombie factorynin altında zombie feeding diye bir sözleşme yaptık. 
 //Bu işlev ZombieFactory nin kodlarını miras alıyor(kopyalıyor).
coontract zombieFeeding is ZombieFactory {

}